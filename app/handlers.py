from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram import F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Bot
import app.keyboards as kb
import app.database.sqlite_db as sql
from config import ADMINS, CHANEL
import random
import datetime
import string 

router = Router()

class issue_point_state(StatesGroup):
    des = State()

class buy_otzuv_state(StatesGroup):
    price = State()
    des = State()

class earn_state(StatesGroup):
    name = State()
    photo = State()

class newsletter_state(StatesGroup):
    msg = State()

class buy_promo_state(StatesGroup):
    points = State()
    quantity = State()

class use_promo_state(StatesGroup):
    name = State()


@router.message(Command('start'))
async def command_start_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('ü™Ñ–≠—Ç–æ —Å–µ—Ä–≤–∏—Å Mutual_Promotion, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏, –ª–∞–π–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø–æ–¥–ø–∏—Å—ã–≤–∞—è—Å—å, —Å—Ç–∞–≤—è –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ª–∞–π–∫–∏ –¥—Ä—É–≥–∏–º\n\nüñç–ö–æ–≥–¥–∞ –≤—ã –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç–µ—Å—å, —Å—Ç–∞–≤–∏—Ç–µ –ª–∞–π–∫–∏ –∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥—Ä—É–≥–∏–º, –º—ã –≤–∞–º –¥–∞—ë–º –º–æ–Ω–µ—Ç—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å —Å–µ–±–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –ª–∞–π–∫–∏ –∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π\n\nü™ô1 –ú–æ–Ω–µ—Ç–∞ = 1 –£—Å–ª—É–≥–∞(1 –ø–æ–¥–ø–∏—Å—á–∏–∫, 1 –ª–∞–π–∫ –∏–ª–∏ 1–∫–æ–º–µ–Ω—Ç)\n\nüíé–°–≤–æ–∏ –ø–µ—Ä–≤—ã–µ 2 –º–æ–Ω–µ—Ç—ã, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /point \n\nüìú–ü—Ä–∞–≤–∏–ª–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /rules\n\nüí¨–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º, –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /help\n\n‚ùì–ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ —Ç–æ –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @Mutual_Promotion2_Bot\n\nü§µ‚Äç‚ôÇÔ∏è–ù–∞—à –∫–∞–Ω–∞–ª: @Mutual_Promotion_Channel', reply_markup=kb.client_reply_keyboards)
    clients_or_no = await sql.get_clients_sql(message.from_user.id)
    if clients_or_no == None:
        await sql.add_all_clients_sql(message.from_user.id)
        if len(str(message.text).split()) == 2:
            referal_id = str(message.text).split()[1]
            await sql.add_one_referal_sql(referal_id)
            await sql.add_two_points_sql(referal_id)


@router.message(F.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é')
async def home_keyboard_handler(message: Message, state: FSMContext):
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é', reply_markup=kb.client_reply_keyboards)
@router.message(Command('help'))
async def command_help_handler(message: Message):
    await message.answer('üìà–ß—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã, –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è, —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏, –ø–∏—Å–∞—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥—Ä—É–≥–∏–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã"\n\nüõí–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏, –ª–∞–π–∫–∏, –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å —É—Å–ª—É–≥–∏"\n\nüè¶–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ë–∞–ª–∞–Ω—Å"\n\nü´Ç–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"\n\n‚≠êÔ∏è–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã –∑–∞ –∑–≤–µ–∑–¥—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã"', reply_markup=kb.client_reply_keyboards)


@router.message(F.text == 'üè¶–ë–∞–ª–∞–Ω—Å')
async def get_points_handler(message: Message, state: FSMContext):
    await state.clear()
    points = await sql.get_clients_sql(message.from_user.id)
    await message.answer(text=f'–í–∞—à –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç:\n{points[1]}üí∞')


@router.message(F.text == 'ü´Ç–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
async def referal_system_handler(message: Message, state: FSMContext):
    await state.clear()
    quantity_ref = await sql.get_clients_sql(message.from_user.id)
    quantity_ref = quantity_ref[3]
    await message.answer(text=f'ü§ù–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n\nüèÖ–ó–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –º—ã –¥–∞—ë–º 2 –º–æ–Ω–µ—Ç—ã\n\n‚ùóÔ∏è–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /rules\n\nüëÄ–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/Mutual_Promotion_Bot?start={message.from_user.id}\n\nü´Ç–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {quantity_ref}')


@router.message(F.text == 'üìà–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã')
async def earn_handler_one(message: Message, state: FSMContext):
    await state.clear()
    order = await sql.new_get_all_fast_orders_sql(message.from_user.id)
    if len(order) != 0:
        rand_order = order[-1]
        users = str(rand_order[3]).split('.')
        await sql.update_fast_orders_sql(int(rand_order[2])-1, rand_order[0])
        await sql.update_id_fast_orders_sql(rand_order[0], message.from_user.id)
        await message.answer(text=f'üîé–ó–∞–∫–∞–∑: {rand_order[0]}\n\nüëÄ–û–ø–∏—Å–∞–Ω–∏–µ: {rand_order[1]}', reply_markup=kb.cancel_inline_keyboard)
        await state.set_state(earn_state.name)
        await state.update_data(name=(rand_order[0], message.from_user.id))
        await message.answer('üì∏–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≥–¥–µ –æ—Ç—á—ë—Ç–ª–∏–≤–æ –≤–∏–¥–Ω–æ —á—Ç–æ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ.\n\n‚úÖ–ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç—á—ë—Ç–ª–∏–≤–æ –≤–∏–¥–Ω–æ —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –º–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–µ –æ–¥–æ–±—Ä–∏—Ç –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ.\n\n‚ùå–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∏—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —á—É—Ç—å –≤—ã—à–µ.')
        await state.set_state(earn_state.photo)
    else:
        await message.answer('üôÖ‚Äç‚ôÇÔ∏è–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç.\n\nü™ô–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –º–æ–Ω–µ—Ç—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /point\n\n‚≠ê–ï—Å–ª–∏ –≤–∞–º —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω—ã –º–æ–Ω–µ—Ç—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Ö –∫—É–ø–∏—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É\n"üí´–ö—É–ø–∏—Ç—å —É—Å–ª—É–≥–∏"')     


@router.message(F.text == 'üí´–ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã')
async def buy_point_stars_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text=f'ü§î–°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?\n\nü™ô2 –ú–æ–Ω–µ—Ç—ã = ‚≠ê1 –ó–≤–µ–∑–¥–∞\n\n‚ÄºÔ∏è–£—á—Ç–∏—Ç–µ —á—Ç–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å 1 –∑–∞–∫–∞–∑ –¥–µ–ª–∞—é—Ç 25 —á–µ–ª–æ–≤–µ–∫, –Ω–æ –∑–∞–∫–∞–∑–æ–≤ –¥–µ–ª–∞—Ç—å –º–æ–∂–Ω–æ –º–Ω–æ–≥–æ!', reply_markup=kb.quantity_buy_point_keyboard)
    
    
@router.message(Command('promo'))
async def promo_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤!\n\n–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å—Ç–æ–∏—Ç 10 –º–æ–Ω–µ—Ç\n\n–¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥ —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç, —Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç —Ä–∞—Å—á–∏—Ç–∞–Ω–æ –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥\n\n1 –º–æ–Ω–µ—Ç–∞ –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞—ë—Ç—Å—è –≤ –ø—Ä–æ–º–æ–∫–æ–¥–µ = 1 –≤–∞—à–∞ –º–æ–Ω–µ—Ç–∞\n\n1 —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"', reply_markup=kb.promo_keyboard)


@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥')
async def buy_promo_one_handler(message: Message, state: FSMContext):
    money = await sql.get_clients_sql(message.from_user.id)
    await state.clear()
    if int(money[1]) > 10:
        await message.answer(text=f'–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å—Ç–æ–∏—Ç 10 –º–æ–Ω–µ—Ç, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ 11\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {money[1]}, —Å –∫–æ—Ç–æ—Ä—ã—Ö –º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—à–µ–º 10 –º–æ–Ω–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —É –≤–∞—Å –µ—Å—Ç—å {int(money[1])-10} –º–æ–Ω–µ—Ç\n\n–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –∑–∞ 1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞')
        await state.set_state(buy_promo_state.points)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 11 –º–æ–Ω–µ—Ç')
        await state.clear()

@router.message(buy_promo_state.points)
async def buy_promo_two_handler(message: Message, state: FSMContext):
    if str(message.text).isdigit() == True:
        money = await sql.get_clients_sql(message.from_user.id)
        if int(money[1])-10 >= int(message.text):
            await state.update_data(points=message.text)
            await message.answer(text=f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –º–æ–∂—Ç –±—ã—Ç—å —É –ø—Ä–æ–º–æ–∫–æ–¥–∞, –∏–º–µ–π—Ç–µ –≤–≤–∏–¥—É —á—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ —Ä–∞–Ω–µ–µ.\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {(int(money[1])-10)//int(message.text)}')
            await state.set_state(buy_promo_state.quantity)
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
            await state.clear()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
        await state.clear()

        
@router.message(buy_promo_state.quantity)
async def buy_promo_tree_handler(message: Message, state: FSMContext):
    if str(message.text).isdigit() == True:
        money = await sql.get_clients_sql(message.from_user.id)
        await state.update_data(quantity=message.text)
        data = await state.get_data()
        if (int(money[1])-10)//int(message.text) >= int(data['quantity']):
            while True:
                promokode = [random.choice(['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9']) for i in range(8)]
                promokode = promokode[0]+promokode[1]+promokode[2]+promokode[3]+promokode[4]+promokode[5]+promokode[6]+promokode[7]
                promo = await sql.get_name_promo_sql(promokode)
                if promo == None:
                    break
            await message.answer(text=f'–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n–ó–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥ –¥–∞—ë—Ç: {data["points"]}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π —É –ø—Ä–æ–º–æ–∫–æ–¥–∞: {data["quantity"]}\n\n–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {promokode}')
            await sql.add_promo_sql(message.from_user.id, promokode, data['quantity'], data['points'])
            await state.clear()
            await sql.minus_balance_sql(message.from_user.id, (int(data['points'])*int(data['quantity'])+10))
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç, –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
            await state.clear()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
        await state.clear()


@router.message(F.text == '–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥')
async def use_promo_one_handler(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤')
    await state.set_state(use_promo_state.name)

@router.message(use_promo_state.name)
async def use_promo_two_handler(message: Message, state: FSMContext):
    all_promo = await sql.get_all_name_promo_sql()
    flag = False
    for promo in all_promo:
        use_user = str(promo[4]).split('.')
        if message.text == promo[1] and str(message.from_user.id) not in use_user:
            await sql.issue_points_sql(str(message.from_user.id), int(promo[3]))
            await sql.update_promo_sql(message.from_user.id, promo[1])
            await message.answer(text=f'–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥—ë–Ω, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {promo[3]}')
            await state.clear()
            flag = True
            break
    if flag == False:
        await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω')
        await state.clear()
    

@router.message(Command('rules'))
async def rules_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('üìú–ü–†–ò –ü–û–ö–£–ü–ö–ï –£–°–õ–£–ì:\n‚ùóÔ∏è1 –î–∞–≤–∞—Ç—å –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—é\n‚ùóÔ∏è2 –ó–∞–∫–∞–∑—ã–≤–∞—Ç—å —É—Å–ª—É–≥—É –æ–¥–Ω–æ–≥–æ –≤–∏–¥–∞ –∑–∞ 1 —Ä–∞–∑(–ò–Ω–∞—á–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–¥–Ω–∏ –∏ —Ç–µ–∂–µ –ª—é–¥–∏)\n‚ùóÔ∏è3 –†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –∏ —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã(–≥—Ä—É–ø–ø—ã)\n‚ùóÔ∏è4 –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞ —Å–≤–æ—ë–º –∫–∞–Ω–∞–ª–µ\n‚ùóÔ∏è5 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç—å –∫ –≤–∞–º –Ω–∞ –∫–∞–Ω–∞–ª\n\nüìú–ü–†–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ù–ò–Ø:\n‚ùóÔ∏è1 –í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞\n‚ùóÔ∏è2 –°–ª–µ–¥–æ–≤–∞—Ç—å –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n‚ùóÔ∏è3 –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"\n\nüìú–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê:\n‚ùóÔ∏è1 –†–µ—Ñ–µ—Ä–∞–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏.')

@router.message(Command('point'))
async def add_point_chanel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text=f'üí¨–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.\n\n‚úÖ–ï—Å–ª–∏ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –º—ã –≤–∞–º –≤—ã–¥–∞–¥–∏–º 2 –º–æ–Ω–µ—Ç—ã.\n\n{CHANEL}', reply_markup=kb.check_inline_keyboard)

@router.message(F.text == 'üõí–ö—É–ø–∏—Ç—å —É—Å–ª—É–≥–∏')
async def buy_otzuv_handler_one(message: Message, state: FSMContext):
    await state.clear()
    points = await sql.get_clients_sql(message.from_user.id)
    await message.answer(text=f'üí∞–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å.\n\nü™ô1 –ú–æ–Ω–µ—Ç–∞ = 1 –£—Å–ª—É–≥–∞(1 –ø–æ–¥–ø–∏—Å—á–∏–∫, 1 –ª–∞–π–∫ –∏–ª–∏ 1 –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π)\n\n‚úÖ–ï—Å–ª–∏ –≤—ã –Ω–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –≤–æ—Å–ø–æ–ª—å–∑—É—è—Å—å –∫–æ–º–∞–Ω–¥–æ–π /rules\n\nüè¶–ë–∞–ª–∞–Ω—Å: {points[1]} –º–æ–Ω–µ—Ç\n\nüß≤–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å 3 —É—Å–ª—É–≥–∏')
    await state.set_state(buy_otzuv_state.price)

@router.message(buy_otzuv_state.price)
async def buy_otzuv_handler_two(message: Message, state: FSMContext):
    if message.text.isdigit() == True and int(message.text) >= 3:
        points = await sql.get_clients_sql(message.from_user.id)
        points = points[1]
        if int(points) >= int(message.text) and int(points) > 0 and int(message.text) > 0:
            await state.update_data(price=message.text)
            await state.set_state(buy_otzuv_state.des)
            await message.answer('üìù–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ–¥–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É. –ò –æ–±—ä—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫—É.\n\nüåü–ü—Ä–∏–º–µ—Ä:\n–ù—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @Mutual_Promotion_Channel\n\nüåó–ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ –ø–æ–ª–Ω–æ–µ, –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–∏—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å. \n\n‚úÖ–ï—Å–ª–∏ –≤—ã –Ω–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –≤–æ—Å–ø–æ–ª—å–∑—É—è—Å—å –∫–æ–º–∞–Ω–¥–æ–π /rules')
        else: 
            await message.answer('‚ö†–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–¥–Ω–æ –∏–∑ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö:\n\n-–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç\n\n-–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥')
            await state.clear()
    else:
        await message.answer('üëª–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å 3 —É—Å–ª—É–≥–∏. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        await state.clear()

@router.message(buy_otzuv_state.des)
async def buy_otzuv_handler_tree(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(des=message.text)
    data = await state.get_data()
    await state.clear()
    quality = await sql.get_number_sql()
    await sql.add_number_sql(int(quality[0][0]))
    await message.answer('üåü–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π, –æ–∂–∏–¥–∞–π—Ç–µ')
    chat_id = await sql.get_chats_sql()
    await sql.minus_balance_sql(message.from_user.id, data["price"])
    await bot.send_message(text=f"–ü—Ä–∏–Ω—è—Ç–µ –∑–∞–∫–∞–∑–∞:::{int(quality[0][0])+1}\n\n:::–û–ø–∏—Å–∞–Ω–∏–µ:::{data['des']}\n\n:::–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—É—Å–ª—É–≥:::{data['price']}\n\n:::id_–ø–æ–∫—É–ø–∞—Ç–µ–ª—è:::{message.from_user.id}", chat_id=chat_id[0], reply_markup=kb.buy_otzuv_moderation_)

@router.callback_query(F.data == 'approve')
async def approve_buy_otzuv_handler(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    await callback.message.edit_text(text=f'{callback.message.text}\n–û–¥–æ–±—Ä–µ–Ω')
    data_buy = str(callback.message.text).split(':::')
    for i in range(len(data_buy)):
        if '\n\n' in data_buy[i] and i != 3:
            data_buy[i] = data_buy[i].replace('\n\n', '')
    await sql.add_fast_orders_sql(data_buy[1], data_buy[3], data_buy[5], data_buy[-1])
    try:
        await bot.send_message(text=f'üåü–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—è–ª–∞ –≤–∞—à –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä {data_buy[1]}, –æ–∂–∏–¥–∞–π—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏', chat_id=data_buy[7])
    except:
        pass

@router.callback_query(F.data == 'reject')
async def approve_buy_otzuv_handler(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    await callback.message.edit_text(text=f'{callback.message.text}\n–û—Ç–∫–ª–æ–Ω—ë–Ω')
    data_buy = str(callback.message.text).split(':::')
    for i in range(len(data_buy)):
        if '\n\n' in data_buy[i] and i != 3:
            data_buy[i] = data_buy[i].replace('\n\n', '')
    await sql.return_points_sql(data_buy[-1], data_buy[5])
    try:
        await bot.send_message(text=f'üëª–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∞–Ω–∏–ª–∞ –≤–∞—à –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä {data_buy[1]}, –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø—Ä–æ—á–∏—Ç–∞–≤ –ø—Ä–∞–≤–∏–ª–∞ –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /rules', chat_id=data_buy[7])
    except:
        pass

@router.message(earn_state.photo)
async def earn_handler_two(message: Message, state: FSMContext, bot: Bot):
    if message.photo:
        await message.answer('üëª–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤—Å—ë –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏, –≤–∞–º –Ω–∞—á–∏—Å–ª—è—Ç –±–∞–ª–ª—ã.')
        chat_id = await sql.get_chats_sql()
        data_state = await state.get_data()
        await state.clear()
        await bot.send_photo(photo=message.photo[-1].file_id, caption=f'–í—ã–¥–∞—á–∞ –∑–∞–∫–∞–∑–∞: {data_state["name"][0]}\n\nid_–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {data_state["name"][1]}', chat_id=chat_id[0], reply_markup=kb.pass_otzuv_moderation_keyboard)
    else:
        await message.answer('üëª–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ')

@router.callback_query(F.data == 'approve_pass')
async def approve_pass_handler(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    data_text = callback.message.caption
    data = str(callback.message.caption).split()
    await sql.add_points_sql(data[-1])
    await sql.update_id_fast_orders_sql(data[2], data[-1])
    fast_order = await sql.activ_order_or_no_sql(str(data[2]))
    if fast_order != None:
        try:
            await bot.send_message(text=f'üåü–í–∞—à –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä {fast_order[0]} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!', chat_id=fast_order[4])
        except:
            pass
    await callback.message.edit_caption(caption=f'{data_text}\n–û–¥–æ–±—Ä–µ–Ω')
    try:
        await bot.send_message(text=f'üåü–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω –±–∞–ª –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä {data[2]}', chat_id=data[-1])
    except:
        pass

@router.callback_query(F.data == 'reject_pass')
async def reject_pass_handler(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    data_text = callback.message.caption
    data = str(callback.message.caption).split()
    await sql.get_fast_orders_number_sql(data[2])
    await callback.message.edit_caption(caption=f'{data_text}\n–û—Ç–∫–ª–æ–Ω—ë–Ω')
    try:
        await bot.send_message(text=f'üëª–ö —Å–æ–∂–∞–ª–µ–Ω–∏–µ –Ω–µ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –±—ã–ª–∏ —Å–æ–±–ª—é–¥–µ–Ω—ã –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä {data[2]}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø—Ä–æ—á–∏—Ç–∞–≤ –ø—Ä–∞–≤–∏–ª–∞ /rules', chat_id=data[-1])
    except:
        pass

@router.message(Command('add_chat'))
async def add_chat1_handler(message: Message):
    if message.from_user.id in ADMINS:
        await sql.add_chats_sql(message.chat.id)
        await message.answer('–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω')

@router.message(Command('delete_chat'))
async def delete_chat1_handler(message: Message):
    if message.from_user.id in ADMINS:
        await sql.delete_chats_sql()
        await message.answer('–ß–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã')

@router.callback_query(F.data == 'cancel')
async def cancel_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()
    number = str(callback.message.text).split()[1]
    await sql.get_fast_orders_number_sql(number)
    await callback.message.answer('üëª–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ')
    await callback.message.edit_text(text=callback.message.text)

@router.callback_query(F.data == '—Åomplain')
async def —Åomplain_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    await callback.answer()
    number = str(callback.message.text).split()[1]
    await sql.get_fast_orders_number_sql(number)
    await callback.message.answer('üëª–í—ã –ø–æ–∂–∞–ª–æ–≤–∞–ª–∏—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–∫–∞–∑—ã!')
    await callback.message.edit_text(text=callback.message.text)
    chat_id = await sql.get_chats_sql()
    await bot.send_message(text=f'–ñ–∞–ª–æ–±–∞ –æ—Ç: {callback.from_user.id}\n\n–ñ–∞–ª–æ–±–∞ –Ω–∞ –∑–∞–∫–∞–∑: {number}', chat_id=chat_id[0])

@router.message(Command('statistics'))
async def statistics_handler(message: Message):
    if message.from_user.id in ADMINS:
        clients = await sql.get_all_clients_sql()
        activ = await sql.active_orders_sql()
        order = await sql.get_number_sql()
        await message.answer(text=f'üëª–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: \n\nüåü–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {len(clients)}\n\nüå™–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {order[0][0]}\n\nüß≤–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(activ)}')

@router.message(Command('newsletter'))
async def newsletter_handler_one(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å')
        await state.set_state(newsletter_state.msg)

@router.message(newsletter_state.msg)
async def newsletter_handler_two(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        clients = await sql.get_all_clients_sql()
        await state.clear()
        total = 0
        for client in clients:
            try:
                await message.send_copy(chat_id=client[0])
            except:
                total = total + 1
                continue
        await message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ, {total} –ª—é–¥–µ–π')

@router.callback_query(F.data == 'check')
async def check_chanel_handler(callback: CallbackQuery, bot: Bot):
    data = await sql.get_clients_sql(callback.from_user.id)
    await callback.answer()
    if data[2] == '0':
        member = await bot.get_chat_member(CHANEL, callback.from_user.id)
        if str(member.status) == 'ChatMemberStatus.MEMBER':
            await sql.add_two_points_sql(callback.from_user.id)
            await sql.subscription_update_sql(callback.from_user.id)
            await callback.message.answer('–£c–ø–µ—à–Ω–æ! –ú—ã –≤–∞–º –≤—ã–¥–∞–ª–∏ –±–∞–ª–ª—ã')
        else: 
            await callback.message.answer('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
    else:
        await callback.message.answer('–í—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π. –û–Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è.')

@router.callback_query(F.data == 'cancel_two')
async def two_cancel_state_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()
    await callback.message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ')
    await callback.message.edit_text(text=callback.message.text)

@router.message(Command('issue'))
async def issue_point_one_handler(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await state.set_state(issue_point_state.des)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')

@router.message(issue_point_state.des)
async def issue_point_two_handler(message: Message, bot: Bot, state: FSMContext):
    data = str(message.text).split('/')
    await state.clear()
    try:
        await sql.issue_points_sql(data[0], data[1])
        await bot.send_message(text=data[2], chat_id=data[0])
        await message.answer('–£—Å–ø–µ—à–Ω–æ!')
    except:
        await message.answer('–û—à–∏–±–∫–∞!')

@router.callback_query(F.data == 'one_point_ik')
async def one_point_plus_handler(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer_invoice(title='2 –º–æ–Ω–µ—Ç—ã', 
                                          description='ü™ô–ó–∞ 2 –º–æ–Ω–µ—Ç—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å 2 —É—Å–ª—É–≥–∏',
                                          payload='one_point_payload',
                                          currency='XTR',
                                          prices=[LabeledPrice(label='XTR', amount=1)])
    
@router.callback_query(F.data == 'five_point_ik')
async def five_point_plus_handler(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer_invoice(title='10 –º–æ–Ω–µ—Ç', 
                                          description='ü™ô–ó–∞ 10 –º–æ–Ω–µ—Ç –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å 10 —É—Å–ª—É–≥',
                                          payload='five_point_payload',
                                          currency='XTR',
                                          prices=[LabeledPrice(label='XTR', amount=5)])

@router.callback_query(F.data == 'ten_point_ik')
async def ten_point_plus_handler(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer_invoice(title='20 –º–æ–Ω–µ—Ç', 
                                          description='ü™ô–ó–∞ 20 –º–æ–Ω–µ—Ç –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å 20 —É—Å–ª—É–≥',
                                          payload='ten_point_payload',
                                          currency='XTR',
                                          prices=[LabeledPrice(label='XTR', amount=10)])

@router.callback_query(F.data == 'twentyfive_point_ik')
async def twentyfive_point_plus_handler(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer_invoice(title='50 –º–æ–Ω–µ—Ç', 
                                          description='ü™ô–ó–∞ 50 –º–æ–Ω–µ—Ç –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å 50 —É—Å–ª—É–≥',
                                          payload='twentyfive_point_payload',
                                          currency='XTR',
                                          prices=[LabeledPrice(label='XTR', amount=25)])

@router.pre_checkout_query()
async def pre_checkout_handler(pcq: PreCheckoutQuery):
    await pcq.answer(ok=True)

@router.message(F.successful_payment)
async def procces_successful_payment_one_handler(message: Message):
    payload_stars = str(message.successful_payment.invoice_payload)
    date = str(datetime.datetime.now())
    
    if payload_stars == 'one_point_payload':
        await sql.issue_points_sql(message.from_user.id, 2)
        await sql.add_donate_sql(message.from_user.id, '2', str(message.successful_payment.telegram_payment_charge_id), date)
        await message.answer(text=f'‚úÖ–£—Å–ø–µ—à–Ω–æ!\n\nüë•–ú—ã –Ω–∞—á–∏—Å–ª–∏–ª–∏ –≤–∞–º 2 –º–æ–Ω–µ—Ç—ã, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\nüôã‚Äç‚ôÇÔ∏è–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ –∏—Ö –±–æ—Ç—É: @Mutual_Promotion2_Bot')

    if payload_stars == 'five_point_payload':
        await sql.issue_points_sql(message.from_user.id, 10)
        await sql.add_donate_sql(message.from_user.id, '10', str(message.successful_payment.telegram_payment_charge_id), date)
        await message.answer(text=f'‚úÖ–£—Å–ø–µ—à–Ω–æ!\n\nüë•–ú—ã –Ω–∞—á–∏—Å–ª–∏–ª–∏ –≤–∞–º 10 –º–æ–Ω–µ—Ç, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\nüôã‚Äç‚ôÇÔ∏è–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ –∏—Ö –±–æ—Ç—É: @Mutual_Promotion2_Bot')

    if payload_stars == 'ten_point_payload':
        await sql.issue_points_sql(message.from_user.id, 20)
        await sql.add_donate_sql(message.from_user.id, '20', str(message.successful_payment.telegram_payment_charge_id), date)
        await message.answer(text=f'‚úÖ–£—Å–ø–µ—à–Ω–æ!\n\nüë•–ú—ã –Ω–∞—á–∏—Å–ª–∏–ª–∏ –≤–∞–º 20 –º–æ–Ω–µ—Ç, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\nüôã‚Äç‚ôÇÔ∏è–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ –∏—Ö –±–æ—Ç—É: @Mutual_Promotion2_Bot')

    if payload_stars == 'twentyfive_point_payload':
        await sql.issue_points_sql(message.from_user.id, 50)
        await sql.add_donate_sql(message.from_user.id, '50', str(message.successful_payment.telegram_payment_charge_id), date)
        await message.answer(text=f'‚úÖ–£—Å–ø–µ—à–Ω–æ!\n\nüë•–ú—ã –Ω–∞—á–∏—Å–ª–∏–ª–∏ –≤–∞–º 50 –º–æ–Ω–µ—Ç, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\nüôã‚Äç‚ôÇÔ∏è–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ –∏—Ö –±–æ—Ç—É: @Mutual_Promotion2_Bot')

@router.message(Command('refund'))
async def refound_command_handler(message: Message, bot: Bot, command: CommandObject):
    if message.from_user.id in ADMINS:
        transaction_id = command.args
        user_id = await sql.get_id_donates_sql(transaction_id)
        try:
            await bot.refund_star_payment(user_id=user_id[0], telegram_payment_charge_id=transaction_id)
            await sql.update_return_stars_sql(transaction_id)
            await message.answer('–£—Å–ø–µ—à–Ω–æ!')
        except:
            await message.answer(text=f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!')


@router.message(Command('user'))
async def command_user_handler(message: Message):
    if message.from_user.id in ADMINS:
        user_id = str(message.text).split()[1]
        data = await sql.get_clients_sql(str(user_id))
        await message.answer(text=f'id: {data[0]}\npoints: {data[1]}\nsubscription: {data[2]}\nreferals: {data[3]}')

@router.message(Command('user_donates'))
async def user_donates_command_handler(message: Message):
    if message.from_user.id in ADMINS:
        user_id = str(message.text).split()[1]
        data = await sql.get_user_donates_sql(str(user_id))
        if data != None:
            await message.answer(text=str(data))
        else:
            await message.answer('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–∫—É–ø–∞–ª –¥–æ–Ω–∞—Ç')


@router.message(Command('delete_order'))
async def delete_orders_command_handler(message: Message):
    if message.from_user.id in ADMINS:
        number = str(message.text).split()[1]
        try:
            await sql.delete_order_sql(str(number))
            await message.answer('–£—Å–ø–µ—à–Ω–æ')
        except:
            await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')


@router.message(Command('minus_point'))
async def minus_point_command_admin_handler(message: Message, bot: Bot, state: FSMContext):
    if message.from_user.id in ADMINS:
        data = str(message.text).split('.')
        try:
            await sql.minus_admin_command_points_sql(data[1], data[2])
            await bot.send_message(text=data[3], chat_id=data[1])
            await message.answer('–£—Å–ø–µ—à–Ω–æ!')
        except:
            await message.answer('–û—à–∏–±–∫–∞!')


@router.message(Command('message_user'))
async def command_message_user(message: Message, bot: Bot):
    if message.from_user.id in ADMINS:
        data = str(message.text).split('%')
        try:
            await bot.send_message(text=str(data[2]), chat_id=data[1])
            await message.answer('–£—Å–ø–µ—à–Ω–æ!')
        except:
            await message.answer('–û—à–∏–±–∫–∞!')


@router.message(Command('everyone'))
async def everyone_point_handler(message: Message):
    if message.from_user.id in ADMINS:
        data = str(message.text).split('.')
        try:
            await sql.everyone_point_sql(data[1])
            await message.answer(text='–£—Å–ø–µ—à–Ω–æ!')
        except:
            await message.answer(text='–û—à–∏–±–∫–∞!')